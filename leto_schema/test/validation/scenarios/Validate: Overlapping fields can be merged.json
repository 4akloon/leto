{
  "name": "Validate: Overlapping fields can be merged",
  "schema": "testSchema",
  "tests": [
    {
      "name": "unique fields",
      "document": "\n      fragment uniqueFields on Dog {\n        name\n        nickname\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "identical fields",
      "document": "\n      fragment mergeIdenticalFields on Dog {\n        name\n        name\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "identical fields with identical args",
      "document": "\n      fragment mergeIdenticalFieldsWithIdenticalArgs on Dog {\n        doesKnowCommand(dogCommand: SIT)\n        doesKnowCommand(dogCommand: SIT)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "identical fields with identical directives",
      "document": "\n      fragment mergeSameFieldsWithSameDirectives on Dog {\n        name @include(if: true)\n        name @include(if: true)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "different args with different aliases",
      "document": "\n      fragment differentArgsWithDifferentAliases on Dog {\n        knowsSit: doesKnowCommand(dogCommand: SIT)\n        knowsDown: doesKnowCommand(dogCommand: DOWN)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "different directives with different aliases",
      "document": "\n      fragment differentDirectivesWithDifferentAliases on Dog {\n        nameIfTrue: name @include(if: true)\n        nameIfFalse: name @include(if: false)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "different skip/include directives accepted",
      "document": "\n      fragment differentDirectivesWithDifferentAliases on Dog {\n        name @include(if: true)\n        name @include(if: false)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "Same aliases with different field targets",
      "document": "\n      fragment sameAliasesWithDifferentFieldTargets on Dog {\n        fido: name\n        fido: nickname\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"fido\" conflict because \"name\" and \"nickname\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "Same aliases allowed on non-overlapping fields",
      "document": "\n      fragment sameAliasesWithDifferentFieldTargets on Pet {\n        ... on Dog {\n          name\n        }\n        ... on Cat {\n          name: nickname\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "Alias masking direct field access",
      "document": "\n      fragment aliasMaskingDirectFieldAccess on Dog {\n        name: nickname\n        name\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"name\" conflict because \"nickname\" and \"name\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "different args, second adds an argument",
      "document": "\n      fragment conflictingArgs on Dog {\n        doesKnowCommand\n        doesKnowCommand(dogCommand: HEEL)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"doesKnowCommand\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "different args, second missing an argument",
      "document": "\n      fragment conflictingArgs on Dog {\n        doesKnowCommand(dogCommand: SIT)\n        doesKnowCommand\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"doesKnowCommand\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "conflicting arg values",
      "document": "\n      fragment conflictingArgs on Dog {\n        doesKnowCommand(dogCommand: SIT)\n        doesKnowCommand(dogCommand: HEEL)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"doesKnowCommand\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "conflicting arg names",
      "document": "\n      fragment conflictingArgs on Dog {\n        isAtLocation(x: 0)\n        isAtLocation(y: 0)\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"isAtLocation\" conflict because they have differing arguments. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "allows different args where no conflict is possible",
      "document": "\n      fragment conflictingArgs on Pet {\n        ... on Dog {\n          name(surname: true)\n        }\n        ... on Cat {\n          name\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "encounters conflict in fragments",
      "document": "\n      {\n        ...A\n        ...B\n      }\n      fragment A on Type {\n        x: a\n      }\n      fragment B on Type {\n        x: b\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"x\" conflict because \"a\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 7, "column": 9 },
            { "line": 10, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "reports each conflict once",
      "document": "\n      {\n        f1 {\n          ...A\n          ...B\n        }\n        f2 {\n          ...B\n          ...A\n        }\n        f3 {\n          ...A\n          ...B\n          x: c\n        }\n      }\n      fragment A on Type {\n        x: a\n      }\n      fragment B on Type {\n        x: b\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"x\" conflict because \"a\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 18, "column": 9 },
            { "line": 21, "column": 9 }
          ]
        },
        {
          "message": "Fields \"x\" conflict because \"c\" and \"a\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 14, "column": 11 },
            { "line": 18, "column": 9 }
          ]
        },
        {
          "message": "Fields \"x\" conflict because \"c\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 14, "column": 11 },
            { "line": 21, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "deep conflict",
      "document": "\n      {\n        field {\n          x: a\n        },\n        field {\n          x: b\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"field\" conflict because subfields \"x\" conflict because \"a\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 11 },
            { "line": 6, "column": 9 },
            { "line": 7, "column": 11 }
          ]
        }
      ]
    },
    {
      "name": "deep conflict with multiple issues",
      "document": "\n      {\n        field {\n          x: a\n          y: c\n        },\n        field {\n          x: b\n          y: d\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"field\" conflict because subfields \"x\" conflict because \"a\" and \"b\" are different fields and subfields \"y\" conflict because \"c\" and \"d\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 11 },
            { "line": 5, "column": 11 },
            { "line": 7, "column": 9 },
            { "line": 8, "column": 11 },
            { "line": 9, "column": 11 }
          ]
        }
      ]
    },
    {
      "name": "very deep conflict",
      "document": "\n      {\n        field {\n          deepField {\n            x: a\n          }\n        },\n        field {\n          deepField {\n            x: b\n          }\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"field\" conflict because subfields \"deepField\" conflict because subfields \"x\" conflict because \"a\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 4, "column": 11 },
            { "line": 5, "column": 13 },
            { "line": 8, "column": 9 },
            { "line": 9, "column": 11 },
            { "line": 10, "column": 13 }
          ]
        }
      ]
    },
    {
      "name": "reports deep conflict to nearest common ancestor",
      "document": "\n      {\n        field {\n          deepField {\n            x: a\n          }\n          deepField {\n            x: b\n          }\n        },\n        field {\n          deepField {\n            y\n          }\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"deepField\" conflict because subfields \"x\" conflict because \"a\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 4, "column": 11 },
            { "line": 5, "column": 13 },
            { "line": 7, "column": 11 },
            { "line": 8, "column": 13 }
          ]
        }
      ]
    },
    {
      "name": "reports deep conflict to nearest common ancestor in fragments",
      "document": "\n      {\n        field {\n          ...F\n        }\n        field {\n          ...F\n        }\n      }\n      fragment F on T {\n        deepField {\n          deeperField {\n            x: a\n          }\n          deeperField {\n            x: b\n          }\n        },\n        deepField {\n          deeperField {\n            y\n          }\n        }\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"deeperField\" conflict because subfields \"x\" conflict because \"a\" and \"b\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 12, "column": 11 },
            { "line": 13, "column": 13 },
            { "line": 15, "column": 11 },
            { "line": 16, "column": 13 }
          ]
        }
      ]
    },
    {
      "name": "reports deep conflict in nested fragments",
      "document": "\n      {\n        field {\n          ...F\n        }\n        field {\n          ...I\n        }\n      }\n      fragment F on T {\n        x: a\n        ...G\n      }\n      fragment G on T {\n        y: c\n      }\n      fragment I on T {\n        y: d\n        ...J\n      }\n      fragment J on T {\n        x: b\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"field\" conflict because subfields \"x\" conflict because \"a\" and \"b\" are different fields and subfields \"y\" conflict because \"c\" and \"d\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 3, "column": 9 },
            { "line": 11, "column": 9 },
            { "line": 15, "column": 9 },
            { "line": 6, "column": 9 },
            { "line": 22, "column": 9 },
            { "line": 18, "column": 9 }
          ]
        }
      ]
    },
    {
      "name": "ignores unknown fragments",
      "document": "\n      {\n        field\n        ...Unknown\n        ...Known\n      }\n\n      fragment Known on T {\n        field\n        ...OtherUnknown\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "does not infinite loop on recursive fragment",
      "document": "\n      fragment fragA on Human { name, relatives { name, ...fragA } }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "does not infinite loop on immediately recursive fragment",
      "document": "\n      fragment fragA on Human { name, ...fragA }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "does not infinite loop on transitively recursive fragment",
      "document": "\n      fragment fragA on Human { name, ...fragB }\n      fragment fragB on Human { name, ...fragC }\n      fragment fragC on Human { name, ...fragA }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": []
    },
    {
      "name": "finds invalid case even with immediately recursive fragment",
      "document": "\n      fragment sameAliasesWithDifferentFieldTargets on Dog {\n        ...sameAliasesWithDifferentFieldTargets\n        fido: name\n        fido: nickname\n      }\n    ",
      "rules": ["OverlappingFieldsCanBeMergedRule"],
      "errors": [
        {
          "message": "Fields \"fido\" conflict because \"name\" and \"nickname\" are different fields. Use different aliases on the fields to fetch both if this was intentional.",
          "locations": [
            { "line": 4, "column": 9 },
            { "line": 5, "column": 9 }
          ]
        }
      ]
    }
  ]
}
