scenario: "Validate: Known type names"
background:
  schema-file: validation.schema.graphql
tests:
  - name: known type names are valid
    given:
      query: |-
        query Foo(
          $var: String
          $required: [Int!]!
          $introspectionType: __EnumValue
        ) {
          user(id: 4) {
            pets { ... on Pet { name }, ...PetFields, ... { name } }
          }
        }
        fragment PetFields on Pet {
          name
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      passes: true
  - name: unknown type names are invalid
    given:
      query: |-
        query Foo($var: [JumbledUpLetters!]!) {
          user(id: 4) {
            name
            pets { ... on Badger { name }, ...PetFields }
          }
        }
        fragment PetFields on Peat {
          name
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      - error-count: 3
      - error-code: undefinedField
        args:
          fieldName: name
          type: CatOrDog
        loc:
          line: 2
          column: 3
  - name: references to standard scalars that are missing in schema
    given:
      query: |-
        query ($id: ID, $float: Float, $int: Int) {
          __typename
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      - error-count: 3
      - error-code: undefinedField
        args:
          fieldName: name
          type: CatOrDog
        loc:
          line: 2
          column: 3
  - name: references to standard scalars that are missing in schema
    given:
      query: |-
        query ($id: ID, $float: Float, $int: Int) {
          __typename
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      - error-count: 3
      - error-code: undefinedField
        args:
          fieldName: name
          type: CatOrDog
        loc:
          line: 2
          column: 3
  - name: use standard types
    given:
      query: |-
        type Query {
          string: String
          int: Int
          float: Float
          boolean: Boolean
          id: ID
          introspectionType: __EnumValue
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      passes: true
  - name: reference types defined inside the same document
    given:
      query: |-
        union SomeUnion = SomeObject | AnotherObject
        type SomeObject implements SomeInterface {
          someScalar(arg: SomeInputObject): SomeScalar
        }
        type AnotherObject {
          foo(arg: SomeInputObject): String
        }
        type SomeInterface {
          someScalar(arg: SomeInputObject): SomeScalar
        }
        input SomeInputObject {
          someScalar: SomeScalar
        }
        scalar SomeScalar
        type RootQuery {
          someInterface: SomeInterface
          someUnion: SomeUnion
          someScalar: SomeScalar
          someObject: SomeObject
        }
        schema {
          query: RootQuery
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      passes: true
  - name: unknown type references
    given:
      query: |-
        type A
        type B
        type SomeObject implements C {
          e(d: D): E
        }
        union SomeUnion = F | G
        interface SomeInterface {
          i(h: H): I
        }
        input SomeInput {
          j: J
        }
        directive @SomeDirective(k: K) on QUERY
        schema {
          query: L
          mutation: M
          subscription: N
        }
    when:
      validate:
        - FieldsOnCorrectType
    then:
      - error-count: 12
      - error-code: undefinedField
